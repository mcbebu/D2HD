package com.example.backendapplication.controller;

import com.example.backendapplication.biz.impl.ConsigneeAppServiceImpl;
import com.example.backendapplication.biz.impl.DriverAppServiceImpl;
import com.example.backendapplication.biz.impl.WaypointServiceImpl;
import com.example.backendapplication.enumeration.DeliveryStatus;
import com.example.backendapplication.model.Waypoint;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api")
public class AppController {
    @Autowired
    private WaypointServiceImpl waypointService;
    @Autowired
    private DriverAppServiceImpl driverAppService;

    @Autowired
    private ConsigneeAppServiceImpl consigneeAppService;

    // List generated by waypoint sequencing
    List<Waypoint> waypointList = Arrays.asList(
            new Waypoint("Address A", "Harry Potter", false, DeliveryStatus.PENDING),
            new Waypoint("Address B", "Hermione Granger", false, DeliveryStatus.PENDING),
            new Waypoint("Address C", "Ron Weasley", false, DeliveryStatus.PENDING),
            new Waypoint("Address D", "Cedric Diggory", false, DeliveryStatus.PENDING),
            new Waypoint("Address E", "Severus Snape", false, DeliveryStatus.PENDING),
            new Waypoint("Address F", "Albus Dumbledore", false, DeliveryStatus.PENDING),
            new Waypoint("Address G", "Draco Malfoy", false, DeliveryStatus.PENDING),
            new Waypoint("Address H", "Neville Longbottom", false, DeliveryStatus.PENDING),
            new Waypoint("Address I", "Peter Pettigrew", false, DeliveryStatus.PENDING),
            new Waypoint("Address J", "Lucius Malfoy", false, DeliveryStatus.PENDING));


    // Driver
    @GetMapping("driverApp/driverStartUp")
    public Queue<Waypoint> driverStartUp() {
        driverAppService.saveWaypoints(waypointList);
        return driverAppService.listToQueue(waypointList);
    }

    /**
     * Api that will be called to pop the first item off the queue
     * Used when "completed" or "fail" is pressed in the driver app
     *
     * @param currentList
     * @return The updated delivery queue with the first element removed
     */
    @PostMapping("driverApp/updateQueue")
    public Queue<Waypoint> updateQueue(@RequestBody List<Waypoint> currentList) {
        Queue<Waypoint> currentQueue = driverAppService.listToQueue(currentList);

        Waypoint firstWaypoint = currentQueue.peek();
        firstWaypoint.setHasVisited(true);
        firstWaypoint.setDeliveryStatus(DeliveryStatus.COMPLETED);
        waypointService.updateWaypoint(firstWaypoint);
        driverAppService.removeFirstWaypoint(currentQueue);

        return currentQueue;
    }

    // Consignee
    @GetMapping("consigneeApp/consigneeAppStartup")
    public List<Waypoint> consigneeAppStartup() {
        Waypoint homeWaypoint = waypointService.findWaypoint("Address G");

        List<Waypoint> waypointList = waypointService.displayWaypointList();
        waypointList.sort(Comparator.comparing(Waypoint::getConsigneeAddress));

        int homeIdx = 0;
        for(int i = 0; i < waypointList.size(); i++) {
            Waypoint currentWaypoint = waypointList.get(i);
            if(currentWaypoint.getConsigneeAddress().equals(homeWaypoint.getConsigneeAddress())){
                homeIdx = i;
            }
        }

        int startIdx = homeIdx - 4;
        List<Waypoint> clusterList = new ArrayList<>();
        for(int i = startIdx; i <= homeIdx; i++) {
            clusterList.add(waypointList.get(i));
        }

        return clusterList;
    }

}
